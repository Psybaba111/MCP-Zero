# Docker Compose for EV Platform MVP
# Orchestrates all services for local development

version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ev_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Backend API
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres/ev_platform
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=dev-secret-key-change-in-production
      - HYPERSWITCH_API_URL=https://sandbox.hyperswitch.io
      - HYPERSWITCH_API_KEY=${HYPERSWITCH_API_KEY}
      - HYPERSWITCH_WEBHOOK_SECRET=${HYPERSWITCH_WEBHOOK_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./backend:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # MCP-Zero Service
  mcp-zero:
    build: ./automation/mcp-zero-service
    ports:
      - "3001:3001"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./MCP-tools:/app/MCP-tools
      - ./MCP-zero:/app/MCP-zero
    command: python server.py

  # Ops Dashboard
  ops-dashboard:
    build: ./ops-dashboard
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
    volumes:
      - ./ops-dashboard:/app
      - /app/node_modules
    command: npm start

  # n8n Automation
  n8n:
    image: n8nio/n8n:latest
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - WEBHOOK_URL=http://localhost:5678
      - BACKEND_API_URL=http://backend:8000/api/v1
      - BACKEND_API_TOKEN=${BACKEND_API_TOKEN}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./automation/n8n:/home/node/workflows
    depends_on:
      - backend

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - ops-dashboard

volumes:
  postgres_data:
  redis_data:
  n8n_data:

networks:
  default:
    driver: bridge